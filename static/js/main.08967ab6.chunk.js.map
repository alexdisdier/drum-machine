{"version":3,"sources":["components/Deck/DrumPad/DrumPad.js","components/Deck/Deck.js","components/Controls/Display/Display.js","components/Controls/Power/Power.js","components/Controls/Volume/Volume.js","components/Controls/Controls.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playSound","bind","assertThisInitialized","handleKeyPress","audio","document","getElementById","keyPushed","console","log","dataFromDeck","play","e","keyCode","react_default","a","createElement","id","soundId","className","onClick","src","url","Component","Deck","state","pad","name","_this2","map","sound","Deck_DrumPad_DrumPad","dataFromApp","Display","dataFromControl","Power","isToggleOn","powerToggle","onPowerClick","setState","htmlFor","type","Volume","step","min","max","Controls","powerClicked","onControlsClick","controlData","Controls_Display_Display","Controls_Power_Power","Controls_Volume_Volume","App","dataFromGP","audioToggle","components_Controls_Controls","components_Deck_Deck","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08967ab6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './DrumPad.scss';\n\nclass DrumPad extends Component {\n// source for javascript event keyCodes: https://keycode.info/\n  constructor(props){\n    super(props);\n\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n\n  playSound(){\n    const audio = document.getElementById(this.props.keyPushed);\n    console.log(audio);\n\n    console.log(this.props.dataFromDeck);\n    if (this.props.dataFromDeck === 'play'){\n      // console.log(\"I'm listening to my parent Deck.js and Deck.js is listening to my grandparents App.js. Power.js hasn't been clicked so I'm on pause\");\n      audio.play();\n    }\n  }\n\n  handleKeyPress(e) {\n    if (e.keyCode === this.props.keyCode) {\n      this.playSound();\n    }\n  }\n\n  render() {\n    return (\n      <button id={this.props.soundId} className=\"drum-pad btn-drum\" onClick={this.playSound}>{this.props.keyPushed}\n        <audio className=\"clip\" id={this.props.keyPushed} src={this.props.url} >\n        </audio>\n      </button>\n\n    );\n  }\n}\n\nexport default DrumPad;\n","import React, { Component } from 'react';\n\nimport DrumPad from './DrumPad/DrumPad';\n\nimport './Deck.scss';\n\nclass Deck extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      pad : [\n        {\n          keyPushed: 'Q',\n          keyCode: 81,\n          name: 'heater 1',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n        },\n        {\n          keyPushed: 'W',\n          keyCode: 87,\n          name: 'heater 2',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n        },\n        {\n          keyPushed: 'E',\n          keyCode: 82,\n          name: 'heater 3',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n        },\n        {\n          keyPushed: 'A',\n          keyCode: 65,\n          name: 'Chord_1',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n        },\n        {\n          keyPushed: 'S',\n          keyCode: 83,\n          name: 'clap',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n        },\n        {\n          keyPushed: 'D',\n          keyCode: 68,\n          name: 'Open-HH',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n        },\n        {\n          keyPushed: 'Z',\n          keyCode: 90,\n          name: 'Chord_2',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n        },\n        {\n          keyPushed: 'X',\n          keyCode: 88,\n          name: 'Kick',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n        },\n        {\n          keyPushed: 'C',\n          keyCode: 67,\n          name: 'Closed-HH',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n        }\n      ]\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"deck\">{\n        this.state.pad.map(sound =>\n          <DrumPad\n            dataFromDeck={this.props.dataFromApp}\n            soundId={sound.id}\n\t\t\t\t\t\turl={sound.url}\n\t\t\t\t\t\tkeyPushed={sound.keyPushed}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Deck;\n","import React, { Component } from 'react';\n\nimport './Display.scss';\n\nclass Display extends Component {\n  render(){\n    return (\n      <div id=\"display\">\n        <ul className={this.props.dataFromControl}>\n         <li>id: 1</li>\n         <li>clip name: pad name</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","import React, { Component } from 'react';\n\nimport './Power.scss';\n\nclass Power extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isToggleOn: false\n    }\n\n    this.powerToggle = this.powerToggle.bind(this);\n  }\n\n  // functions which switch power light on and off\n  powerToggle() {\n    // console.log('Power.js is the child');\n\n    // This props interact with parent component (Control.js)\n    this.props.onPowerClick();\n\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  render() {\n\n    return (\n      <div id=\"btn-power-container\">\n        <label htmlFor=\"btn-power\">Power</label>\n        <input type=\"button\" id=\"btn-power\" className={this.state.isToggleOn ? 'power-on' : 'power-off'} onClick={this.powerToggle}/>\n        <span />\n      </div>\n    );\n  }\n}\n\nexport default Power;\n","import React, { Component } from 'react';\n\nimport './Volume.scss';\n\nclass Volume extends Component {\n  render(){\n    return (\n      <input type=\"range\" step=\"0.01\" min=\"0\" max=\"1\"/>\n    );\n  }\n}\n\nexport default Volume;\n","import React, { Component } from 'react';\n\nimport Display from './Display/Display';\nimport Power from './Power/Power';\nimport Volume from './Volume/Volume';\n\nimport './Controls.scss';\n\nclass Controls extends Component {\n  constructor() {\n    super()\n    this.state = {\n      controlData: \"hide\"\n    }\n\n    this.powerClicked = this.powerClicked.bind(this);\n  }\n\n  powerClicked = () => {\n    // console.log('Controls.js is the parent');\n\n    // This props interact with parent component (App.js)\n    this.props.onControlsClick();\n\n    if (this.state.controlData === 'hide'){\n      this.setState({\n        controlData: 'show'\n      });\n    } else {\n      this.setState({\n        controlData: 'hide'\n      });\n    }\n  }\n\n  render(){\n    return (\n      <div id=\"controls\">\n        <Display dataFromControl={this.state.controlData}/>\n        <Power onPowerClick={this.powerClicked} />\n        <Volume />\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\n\nimport Deck from './components/Deck/Deck';\nimport Controls from './components/Controls/Controls';\n\nimport './App.scss';\n\nclass App extends Component {\n\n  constructor(props) {\n   super(props)\n   this.state = {\n     audio: 'pause',\n     dataFromGP: 'g-p'\n   }\n\n    this.audioToggle = this.audioToggle.bind(this);\n  }\n\n  audioToggle() {\n    // console.log('App.js is the grandparent');\n\n    if (this.state.audio === 'pause'){\n      this.setState({\n        audio: 'play'\n      });\n      console.log('Power is on, play');\n    } else {\n      this.setState({\n        audio: 'pause'\n      });\n      console.log('Power is off, pause');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\" id=\"drum-machine\">\n      <header>\n       <h1>Pad Controller</h1>\n      </header>\n        <div className=\"pad-controller\">\n          <div className=\"left-flex\">\n            <Controls onControlsClick={this.audioToggle}/>\n          </div>\n          <div className=\"right-flex\">\n            <Deck dataFromApp={this.state.audio}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}