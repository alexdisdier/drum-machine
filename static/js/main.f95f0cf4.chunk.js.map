{"version":3,"sources":["components/Deck/DrumPad/DrumPad.js","components/Deck/Deck.js","components/Controls/Display/Display.js","components/Controls/Power/Power.js","components/Controls/Controls.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playSoundHandler","audio","document","getElementById","keyPushed","displayGrandParent","id","innerText","dataFromDeck","play","bind","assertThisInitialized","handleKeyPress","addEventListener","removeEventListener","e","keyCode","react_default","a","createElement","keyId","className","onClick","src","url","keyName","Component","Deck","handleParentProps","handlerDisplayFromParent","state","pad","name","_this2","map","sound","Deck_DrumPad_DrumPad","key","dataFromApp","handlerDisplayFromGrandParent","display","dataFromControl","displayId","displayName","Power","isToggleOn","powerToggle","onPowerClick","setState","htmlFor","type","Controls","powerClicked","onControlsClick","controlData","Display_Display","onDisplayName","onDisplayId","Controls_Power_Power","App","togglePowerHandler","doesPower","power","displayHandler","components_Controls_Controls","components_Deck_Deck","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f95f0cf4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './DrumPad.scss';\n\nclass DrumPad extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.playSoundHandler = this.playSoundHandler.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  playSoundHandler = () => {\n    const audio = document.getElementById(this.props.keyPushed);\n    this.props.displayGrandParent(audio.id, audio.innerText);\n\n    if (this.props.dataFromDeck){\n      audio.play();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n  handleKeyPress(e) {\n    if (e.keyCode === this.props.keyCode) {\n      this.playSoundHandler();\n    }\n  }\n\n  render() {\n    return (\n      <button id={this.props.keyId} className=\"drum-pad btn-drum\" onClick={this.playSoundHandler}>{this.props.keyPushed}\n        <audio className=\"clip\" id={this.props.keyPushed} src={this.props.url}>{this.props.keyName}\n        </audio>\n      </button>\n\n    );\n  }\n}\n\nexport default DrumPad;\n","import React, { Component } from 'react';\n\nimport DrumPad from './DrumPad/DrumPad';\n\nimport './Deck.scss';\n\nclass Deck extends Component {\n// source for javascript event keyCodes: https://keycode.info/\n\n  constructor(props){\n    super(props);\n    this.state = {\n      pad : [\n        {\n          id: 1,\n          keyPushed: 'Q',\n          keyCode: 81,\n          name: 'heater 1',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n        },\n        {\n          id: 2,\n          keyPushed: 'W',\n          keyCode: 87,\n          name: 'heater 2',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n        },\n        {\n          id: 3,\n          keyPushed: 'E',\n          keyCode: 69,\n          name: 'heater 3',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n        },\n        {\n          id: 4,\n          keyPushed: 'A',\n          keyCode: 65,\n          name: 'Chord_1',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n        },\n        {\n          id: 5,\n          keyPushed: 'S',\n          keyCode: 83,\n          name: 'clap',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n        },\n        {\n          id: 6,\n          keyPushed: 'D',\n          keyCode: 68,\n          name: 'Open-HH',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n        },\n        {\n          id: 7,\n          keyPushed: 'Z',\n          keyCode: 90,\n          name: 'Chord_2',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n        },\n        {\n          id: 8,\n          keyPushed: 'X',\n          keyCode: 88,\n          name: 'Kick',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n        },\n        {\n          id: 9,\n          keyPushed: 'C',\n          keyCode: 67,\n          name: 'Closed-HH',\n          url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n        }\n      ]\n    }\n\n    this.handleParentProps = this.handleParentProps.bind(this);\n  }\n\n  handleParentProps = () => this.props.handlerDisplayFromParent();\n  \n  render() {\n    return (\n      <div className=\"deck\">{\n        this.state.pad.map(sound =>\n\n          // passing my state data to props\n          <DrumPad  key={sound.id}\n                    keyId={sound.id}\n                    keyName={sound.name}\n                    dataFromDeck={this.props.dataFromApp}\n\t\t\t\t\t\t        url={sound.url}\n\t\t\t\t\t\t        keyPushed={sound.keyPushed}\n                    keyCode = {sound.keyCode}\n                    displayGrandParent = {this.props.handlerDisplayFromGrandParent}\n\n          />\n        )}\n      </div>\n\n    );\n  }\n}\n\nexport default Deck;\n","import React from 'react';\n\nimport './Display.scss';\n\nconst display = (props) => {\n  return (\n    <div id=\"display\">\n      <ul className={props.dataFromControl}>\n        <li>key: {props.displayId}</li>\n        <li>sound: {props.displayName}</li>\n      </ul>\n    </div>\n  )\n};\n\nexport default display;\n","import React, { Component } from 'react';\n\nimport './Power.scss';\n\nclass Power extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isToggleOn: false\n    }\n\n    this.powerToggle = this.powerToggle.bind(this);\n  }\n\n  // functions which switch power light on and off\n  powerToggle() {\n    // console.log('Power.js is the child');\n\n    // This props interact with parent component (Control.js)\n    this.props.onPowerClick();\n\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  render() {\n\n    return (\n      <div id=\"btn-power-container\">\n        <label htmlFor=\"btn-power\">Power</label>\n        <input type=\"button\" id=\"btn-power\" className={this.state.isToggleOn ? 'power-on' : 'power-off'} onClick={this.powerToggle}/>\n        <span />\n      </div>\n    );\n  }\n}\n\nexport default Power;\n","import React, { Component } from 'react';\n\nimport Display from './Display/Display';\nimport Power from './Power/Power';\n// import Volume from './Volume/Volume';\n\nimport './Controls.scss';\n\nclass Controls extends Component {\n  constructor() {\n    super()\n    this.state = {\n      controlData: \"hide\"\n    }\n\n    this.powerClicked = this.powerClicked.bind(this);\n  }\n\n  powerClicked = () => {\n    // console.log('Controls.js is the parent');\n    // This props interact with parent component (App.js)\n    this.props.onControlsClick();\n\n    if (this.state.controlData === 'hide'){\n      this.setState({\n        controlData: 'show'\n      });\n    } else {\n      this.setState({\n        controlData: 'hide'\n      });\n    }\n  }\n\n  // This props interact with parent component (App.js)\n  displayName = () => this.props.onControlsClick();\n\n  render(){\n    return (\n      <div id=\"controls\">\n        <Display  dataFromControl={this.state.controlData}\n                  displayName = {this.props.onDisplayName}\n                  displayId = {this.props.onDisplayId}\n        />\n        <Power onPowerClick={this.powerClicked} />\n        {/*<Volume />*/}\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\n\nimport Deck from './components/Deck/Deck';\nimport Controls from './components/Controls/Controls';\n\nimport './App.scss';\n\nclass App extends Component {\n\n  constructor(props) {\n   super(props)\n   this.state = {\n     power: false,\n\n     // the data will be received from Deck.js\n     displayName: '',\n     displayId: ''\n   }\n\n    this.togglePowerHandler = this.togglePowerHandler.bind(this);\n    this.displayHandler = this.displayHandler.bind(this);\n  }\n\n  togglePowerHandler = () => {\n    // console.log('power');\n    const doesPower = this.state.power;\n    this.setState({ power: !doesPower });\n  }\n\n  displayHandler = (id, name) => this.setState({\n      displayId: id,\n      displayName: name\n  });\n  \n  render() {\n    return (\n      <div className=\"App\" id=\"drum-machine\">\n      <header>\n       <h1>Pad Controller</h1>\n      </header>\n        <div className=\"pad-controller\">\n          <div className=\"left-flex\">\n            <Controls onControlsClick={this.togglePowerHandler}\n                      onDisplayName = {this.state.displayName}\n                      onDisplayId = {this.state.displayId}/>\n          </div>\n          <div className=\"right-flex\">\n            {/* passing a callback as a prop to a child */}\n            <Deck dataFromApp = {this.state.power}\n                  handlerDisplayFromGrandParent = {this.displayHandler}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}